<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 27 May 2023 18:32:00 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: textcasting</title>
		<dateCreated>Sat, 27 May 2023 12:37:48 GMT</dateCreated>
		<dateModified>Sat, 27 May 2023 18:32:00 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 4, 18, 34, 39, 43, 49, 52, 55, 72, 74, 76, 85, 86, 87, 97, 112, 113, 115, 116, 137</expansionState>
		<vertScrollState>27</vertScrollState>
		<windowTop>45</windowTop>
		<windowLeft>530</windowLeft>
		<windowBottom>1095</windowBottom>
		<windowRight>1765</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/textcasting/" created="Sat, 22 Apr 2023 17:37:04 GMT">
			<outline text="worknotes.md" created="Sat, 27 May 2023 12:40:43 GMT">
				<outline text="#### 5/27/23; 8:40:46 AM by DW" created="Sat, 27 May 2023 12:40:44 GMT">
					<outline text="A fork of feedToMasto, which started as a way to map a set of RSS feeds onto a Mastodon account, then added Bluesky and WordPress. " created="Sat, 27 May 2023 12:40:47 GMT">
						<outline text="It was hooked into a FeedLand instance via websockets, so it received instant notification that the feed had updated." created="Sat, 27 May 2023 12:49:12 GMT"/>
						<outline text="The textcasting package is the core of the feedToMasto functionality, it just handles the sending of messsages to Masto, Bluesky and WordPress. " created="Sat, 27 May 2023 12:49:43 GMT"/>
						<outline text="I left feedToMasto where it was. If it serves a purpose in the future it should use this package." created="Sat, 27 May 2023 12:50:36 GMT"/>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;textcasting&quot;,"/>
					<outline text="&quot;description&quot;: &quot;An HTTP server that can post messages to Mastodon, Bluesky and WordPress via REST call. Think of it as a bridge between web writing tools and various places people want to post their writing to.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.7&quot;,"/>
					<outline text="&quot;main&quot;: &quot;textcasting.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/textcasting.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;textcasting.js&quot;,"/>
						<outline text="&quot;worknotes.md&quot;," created="Sat, 27 May 2023 12:58:26 GMT"/>
						<outline text="&quot;readme.md&quot;" created="Sat, 27 May 2023 12:58:36 GMT"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;," created="Sat, 27 May 2023 13:00:51 GMT"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;querystring&quot;: &quot;*&quot;,"/>
						<outline text="&quot;websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;wordpress&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="textcasting.js">
				<outline text="const myVersion = &quot;0.4.7&quot;, myProductName = &quot;textcasting&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Sat, 27 May 2023 13:14:31 GMT"/>
				<outline text="exports.start = start; "/>
				<outline text="" created="Sat, 27 May 2023 12:51:17 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const websocket = require (&quot;websocket&quot;).w3cwebsocket;"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const wordpress = require (&quot;wordpress&quot;); "/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const qs = require (&quot;querystring&quot;); "/>
				<outline text="" created="Sat, 27 May 2023 12:51:34 GMT"/>
				<outline text="var config = {" created="Mon, 29 Nov 2021 15:52:16 GMT">
					<outline text="userAgent: myProductName + &quot;/&quot; + myVersion," created="Sat, 27 May 2023 18:12:03 GMT"/>
					<outline text="dataFolder: &quot;data/textcasting/&quot;," created="Sat, 27 May 2023 13:45:04 GMT"/>
					<outline text="port: process.env.PORT || 1422," created="Fri, 16 Dec 2022 18:51:38 GMT"/>
					<outline text="flPostEnabled: true," created="Sat, 17 Dec 2022 16:10:45 GMT"/>
					<outline text="flLogToConsole: true, //davehttp logs each request to the console"/>
					<outline text="flTraceOnError: false //davehttp does not try to catch the error" created="Fri, 16 Dec 2022 21:13:38 GMT"/>
					<outline text="};" created="Mon, 29 Nov 2021 15:52:19 GMT"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;" created="Mon, 28 Nov 2022 23:31:55 GMT"/>
				<outline text="" created="Sat, 27 May 2023 12:52:40 GMT"/>
				<outline text="var stats = {" created="Mon, 28 Nov 2022 23:28:06 GMT">
					<outline text="ctHits: 0," created="Sat, 27 May 2023 13:48:15 GMT"/>
					<outline text="whenLastHit: undefined" created="Sat, 27 May 2023 13:48:24 GMT"/>
					<outline text="};" created="Mon, 28 Nov 2022 23:28:12 GMT"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;;" created="Mon, 28 Nov 2022 23:31:55 GMT"/>
				<outline text="var flStatsChanged = false;" created="Mon, 28 Nov 2022 23:30:42 GMT"/>
				<outline text="" created="Sat, 27 May 2023 12:52:41 GMT"/>
				<outline text="function statsChanged () {" created="Mon, 28 Nov 2022 23:32:35 GMT">
					<outline text="flStatsChanged = true;" created="Mon, 28 Nov 2022 23:32:47 GMT"/>
					<outline text="}" created="Mon, 28 Nov 2022 23:32:40 GMT"/>
					</outline>
				<outline text="function writeStats () {" created="Wed, 30 Nov 2022 15:47:36 GMT">
					<outline text="const f = config.dataFolder + fnameStats;" created="Sat, 27 May 2023 13:46:20 GMT"/>
					<outline text="utils.sureFilePath (f, function () {" created="Sat, 27 May 2023 13:46:42 GMT">
						<outline text="fs.writeFile (f, utils.jsonStringify (stats), function (err) {" created="Mon, 28 Nov 2022 23:30:59 GMT">
							<outline text="});" created="Mon, 28 Nov 2022 23:31:31 GMT"/>
							</outline>
						<outline text="});" created="Sat, 27 May 2023 13:46:51 GMT"/>
						</outline>
					<outline text="}" created="Wed, 30 Nov 2022 15:47:44 GMT"/>
					</outline>
				<outline text="function getStringBytes (theString) { //5/17/23 by DW" created="Tue, 16 May 2023 22:39:24 GMT">
					<outline text="const ctbytes = Buffer.byteLength (theString);"/>
					<outline text="return (ctbytes);" created="Tue, 16 May 2023 22:41:11 GMT"/>
					<outline text="}" created="Tue, 16 May 2023 22:39:37 GMT"/>
					</outline>
				<outline text="" created="Sat, 27 May 2023 14:01:52 GMT"/>
				<outline text="function postToBluesky (params, callback) {" created="Fri, 12 May 2023 12:39:35 GMT">
					<outline text="Changes" isComment="true" created="Fri, 12 May 2023 22:00:52 GMT">
						<outline text="5/27/23; 2:10:37 PM by DW" created="Sat, 27 May 2023 18:10:36 GMT">
							<outline text="params: urlsite, mailaddress, password" created="Sat, 27 May 2023 18:10:37 GMT"/>
							</outline>
						<outline text="5/12/23; 6:00:55 PM by DW" created="Fri, 12 May 2023 22:00:54 GMT">
							<outline text="We can't use getStatusTextx for bluesky because it's doing funky stuff with links. " created="Fri, 12 May 2023 22:00:56 GMT"/>
							</outline>
						</outline>
					<outline text="const maxCtChars = 300;" created="Sat, 27 May 2023 18:28:35 GMT"/>
					<outline text="function getAccessToken (options, callback) {">
						<outline text="const url = options.urlsite + &quot;xrpc/com.atproto.server.createSession&quot;;" created="Mon, 08 May 2023 14:59:04 GMT"/>
						<outline text="const bodystruct = {" created="Mon, 08 May 2023 17:15:55 GMT">
							<outline text="identifier: options.mailaddress," created="Mon, 08 May 2023 17:16:37 GMT"/>
							<outline text="password: options.password" created="Mon, 08 May 2023 17:16:55 GMT"/>
							<outline text="};" created="Mon, 08 May 2023 17:16:28 GMT"/>
							</outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="url: url,"/>
							<outline text="body: utils.jsonStringify (bodystruct),"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"/>
								<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;" created="Mon, 08 May 2023 17:14:51 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;postToBluesky: theRequest == &quot; + utils.jsonStringify (theRequest));" isComment="true" created="Mon, 08 May 2023 17:27:33 GMT"/>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="var jstruct = undefined;"/>
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="console.log (&quot;postToBluesky: body == &quot; + body);" isComment="true" created="Mon, 08 May 2023 15:10:34 GMT"/>
									<outline text="callback (undefined, JSON.parse (body));"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function newPost (options, authorization, item, callback) {">
						<outline text="const url = options.urlsite + &quot;xrpc/com.atproto.repo.createRecord&quot;;" created="Mon, 08 May 2023 14:59:04 GMT"/>
						<outline text="const nowstring = new Date ().toISOString ();" created="Mon, 08 May 2023 19:16:51 GMT"/>
						<outline text="" created="Fri, 12 May 2023 22:13:26 GMT"/>
						<outline text="function notEmpty (s) {" created="Fri, 12 May 2023 21:51:38 GMT">
							<outline text="if (s === undefined) {" created="Fri, 12 May 2023 21:51:47 GMT">
								<outline text="return (false);" created="Fri, 12 May 2023 21:52:15 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 21:52:02 GMT"/>
								</outline>
							<outline text="if (s.length == 0) {" created="Fri, 12 May 2023 21:52:21 GMT">
								<outline text="return (false);" created="Fri, 12 May 2023 21:52:33 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 21:52:30 GMT"/>
								</outline>
							<outline text="return (true);" created="Fri, 12 May 2023 21:52:41 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 21:51:46 GMT"/>
							</outline>
						<outline text="function decodeForBluesky (s) {" created="Sat, 13 May 2023 15:52:13 GMT">
							<outline text="s = utils.decodeXml (s); //5/20/23 by DW" created="Sat, 20 May 2023 22:14:18 GMT"/>
							<outline text="var replacetable = { ">
								<outline text="&quot;#39&quot;: &quot;'&quot;"/>
								<outline text="};"/>
								</outline>
							<outline text="s = utils.multipleReplaceAll (s, replacetable, true, &quot;&amp;&quot;, &quot;;&quot;);" created="Wed, 06 Nov 2013 17:58:18 GMT" pgfnum="31057"/>
							<outline text="return (s);"/>
							<outline text="}" created="Sat, 13 May 2023 15:52:23 GMT"/>
							</outline>
						<outline text="function getStatusText (item) { //special for bluesky, just get the text, no link" created="Fri, 12 May 2023 22:13:26 GMT">
							<outline text="var statustext = &quot;&quot;;" created="Tue, 29 Nov 2022 00:08:18 GMT"/>
							<outline text="function add (s) {" created="Tue, 29 Nov 2022 00:07:39 GMT">
								<outline text="statustext += s;" created="Tue, 29 Nov 2022 00:07:51 GMT"/>
								<outline text="}" created="Tue, 29 Nov 2022 00:08:09 GMT"/>
								</outline>
							<outline text="function addText (desc) {" created="Tue, 29 Nov 2022 18:51:43 GMT">
								<outline text="desc = decodeForBluesky (desc); " created="Sat, 13 May 2023 15:53:49 GMT"/>
								<outline text="desc = utils.trimWhitespace (utils.stripMarkup (desc));" created="Fri, 12 May 2023 21:47:37 GMT"/>
								<outline text="if (desc.length &gt; 0) {" created="Fri, 12 May 2023 21:56:27 GMT">
									<outline text="const maxcount = maxCtChars - (statustext.length + desc.length + 2); //the 2 is for the two newlines after the description" created="Thu, 01 Dec 2022 21:52:14 GMT"/>
									<outline text="desc = utils.maxStringLength (desc, maxcount, false, true) + &quot;\n\n&quot;;" created="Fri, 12 May 2023 21:57:01 GMT"/>
									<outline text="add (desc);"/>
									<outline text="}" created="Fri, 12 May 2023 21:56:28 GMT"/>
									</outline>
								<outline text="}" created="Tue, 29 Nov 2022 18:51:49 GMT"/>
								</outline>
							<outline text="if (notEmpty (item.title)) {" created="Fri, 12 May 2023 21:45:56 GMT">
								<outline text="addText (item.title);" created="Fri, 12 May 2023 21:46:16 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 21:46:04 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 12 May 2023 21:46:05 GMT">
								<outline text="addText (item.description);" created="Fri, 12 May 2023 21:46:16 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 21:46:07 GMT"/>
								</outline>
							<outline text="return (statustext);" created="Fri, 12 May 2023 12:41:21 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 22:13:38 GMT"/>
							</outline>
						<outline text="function getRecord (item) {" created="Fri, 12 May 2023 22:18:30 GMT">
							<outline text="var theRecord = {" created="Fri, 12 May 2023 22:25:06 GMT">
								<outline text="text: getStatusText (item)," created="Mon, 08 May 2023 19:15:34 GMT"/>
								<outline text="createdAt: nowstring" created="Mon, 08 May 2023 19:15:52 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 22:25:17 GMT"/>
								</outline>
							<outline text="if (notEmpty (item.link)) {" created="Fri, 12 May 2023 22:16:08 GMT">
								<outline text="const linkword = utils.getDomainFromUrl (item.link);" created="Fri, 12 May 2023 22:20:07 GMT"/>
								<outline text="theRecord.text += linkword;" created="Fri, 12 May 2023 22:20:07 GMT"/>
								<outline text="const ctbytes = getStringBytes (theRecord.text); //5/16/23 by DW" created="Tue, 16 May 2023 22:41:37 GMT"/>
								<outline text="theRecord.facets = [" created="Fri, 12 May 2023 22:20:07 GMT">
									<outline text="{" created="Fri, 12 May 2023 22:21:26 GMT">
										<outline text="features: [" created="Fri, 12 May 2023 22:21:38 GMT">
											<outline text="{" created="Fri, 12 May 2023 22:21:53 GMT">
												<outline text="uri: item.link," created="Fri, 12 May 2023 22:22:00 GMT"/>
												<outline text="&quot;$type&quot;: &quot;app.bsky.richtext.facet#link&quot;" created="Fri, 12 May 2023 22:22:07 GMT"/>
												<outline text="}" created="Fri, 12 May 2023 22:21:55 GMT"/>
												</outline>
											<outline text="]," created="Fri, 12 May 2023 22:21:44 GMT"/>
											</outline>
										<outline text="index: {" created="Fri, 12 May 2023 22:22:51 GMT">
											<outline text="byteStart: ctbytes - linkword.length, //5/16/23 by DW" created="Fri, 12 May 2023 22:23:05 GMT"/>
											<outline text="byteEnd: ctbytes" created="Fri, 12 May 2023 22:23:09 GMT"/>
											<outline text="}" created="Fri, 12 May 2023 22:22:55 GMT"/>
											</outline>
										<outline text="}" created="Fri, 12 May 2023 22:21:27 GMT"/>
										</outline>
									<outline text="];" created="Fri, 12 May 2023 22:21:21 GMT"/>
									</outline>
								<outline text="}" created="Fri, 12 May 2023 22:16:15 GMT"/>
								</outline>
							<outline text="console.log (&quot;bluesky/getRecord: theRecord == &quot; + utils.jsonStringify (theRecord));" created="Sat, 13 May 2023 13:42:15 GMT"/>
							<outline text="return (theRecord);" created="Fri, 12 May 2023 22:19:52 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 22:19:11 GMT"/>
							</outline>
						<outline text="function getRecord (item) {" isComment="true" created="Fri, 12 May 2023 22:18:30 GMT">
							<outline text="var theRecord = {" created="Fri, 12 May 2023 22:25:06 GMT">
								<outline text="text: getStatusText (item)," created="Mon, 08 May 2023 19:15:34 GMT"/>
								<outline text="createdAt: nowstring" created="Mon, 08 May 2023 19:15:52 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 22:25:17 GMT"/>
								</outline>
							<outline text="if (notEmpty (item.link)) {" created="Fri, 12 May 2023 22:16:08 GMT">
								<outline text="const linkword = utils.getDomainFromUrl (item.link);" created="Fri, 12 May 2023 22:20:07 GMT"/>
								<outline text="theRecord.text += linkword;" created="Fri, 12 May 2023 22:20:07 GMT"/>
								<outline text="const ctbytes = getStringBytes (theRecord.text);" created="Tue, 16 May 2023 22:41:37 GMT"/>
								<outline text="theRecord.facets = [" created="Fri, 12 May 2023 22:20:07 GMT">
									<outline text="{" created="Fri, 12 May 2023 22:21:26 GMT">
										<outline text="features: [" created="Fri, 12 May 2023 22:21:38 GMT">
											<outline text="{" created="Fri, 12 May 2023 22:21:53 GMT">
												<outline text="uri: item.link," created="Fri, 12 May 2023 22:22:00 GMT"/>
												<outline text="&quot;$type&quot;: &quot;app.bsky.richtext.facet#link&quot;" created="Fri, 12 May 2023 22:22:07 GMT"/>
												<outline text="}" created="Fri, 12 May 2023 22:21:55 GMT"/>
												</outline>
											<outline text="]," created="Fri, 12 May 2023 22:21:44 GMT"/>
											</outline>
										<outline text="index: {" created="Fri, 12 May 2023 22:22:51 GMT">
											<outline text="byteStart: theRecord.text.length - linkword.length," created="Fri, 12 May 2023 22:23:05 GMT"/>
											<outline text="byteEnd: theRecord.text.length" created="Fri, 12 May 2023 22:23:09 GMT"/>
											<outline text="}" created="Fri, 12 May 2023 22:22:55 GMT"/>
											</outline>
										<outline text="}" created="Fri, 12 May 2023 22:21:27 GMT"/>
										</outline>
									<outline text="];" created="Fri, 12 May 2023 22:21:21 GMT"/>
									</outline>
								<outline text="}" created="Fri, 12 May 2023 22:16:15 GMT"/>
								</outline>
							<outline text="console.log (&quot;bluesky/getRecord: theRecord == &quot; + utils.jsonStringify (theRecord));" created="Sat, 13 May 2023 13:42:15 GMT"/>
							<outline text="return (theRecord);" created="Fri, 12 May 2023 22:19:52 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 22:19:11 GMT"/>
							</outline>
						<outline text="" created="Fri, 12 May 2023 22:18:31 GMT"/>
						<outline text="const bodystruct = {" created="Mon, 08 May 2023 17:15:55 GMT">
							<outline text="repo: authorization.did," created="Mon, 08 May 2023 19:14:44 GMT"/>
							<outline text="collection: &quot;app.bsky.feed.post&quot;," created="Mon, 08 May 2023 19:15:06 GMT"/>
							<outline text="validate: true," created="Mon, 08 May 2023 19:15:09 GMT"/>
							<outline text="record: getRecord (item)" created="Fri, 12 May 2023 22:24:47 GMT"/>
							<outline text="};" created="Mon, 08 May 2023 17:16:28 GMT"/>
							</outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="url: url,"/>
							<outline text="body: utils.jsonStringify (bodystruct),"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"/>
								<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;," created="Mon, 08 May 2023 17:14:51 GMT"/>
								<outline text="Authorization: &quot;Bearer &quot; + authorization.accessJwt" created="Mon, 08 May 2023 17:14:51 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="console.log (&quot;newBlueskyPost: body == &quot; + body);" isComment="true" created="Mon, 08 May 2023 15:10:34 GMT"/>
									<outline text="callback (undefined, JSON.parse (body));"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="getAccessToken (params, function (err, authorization) {" created="Mon, 08 May 2023 17:20:02 GMT">
						<outline text="if (err) {" created="Mon, 08 May 2023 14:59:49 GMT">
							<outline text="console.log (&quot;postToBluesky: err.message == &quot; + err.message);" created="Mon, 08 May 2023 14:59:52 GMT"/>
							<outline text="callback (err);" created="Sat, 27 May 2023 18:15:36 GMT"/>
							<outline text="}" created="Mon, 08 May 2023 14:59:57 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 08 May 2023 14:59:58 GMT">
							<outline text="console.log (&quot;postToBluesky: authorization == &quot; + utils.jsonStringify (authorization));" isComment="true" created="Mon, 08 May 2023 14:59:52 GMT"/>
							<outline text="const item = {" created="Sat, 27 May 2023 18:26:11 GMT">
								<outline text="title: params.title," created="Sat, 27 May 2023 18:26:17 GMT"/>
								<outline text="description: params.description," created="Sat, 27 May 2023 18:26:22 GMT"/>
								<outline text="link: params.link" created="Sat, 27 May 2023 18:26:29 GMT"/>
								<outline text="}" created="Sat, 27 May 2023 18:26:34 GMT"/>
								</outline>
							<outline text="newPost (params, authorization, item, function (err, data) {" created="Mon, 08 May 2023 19:19:50 GMT">
								<outline text="if (err) {" created="Mon, 08 May 2023 14:59:49 GMT">
									<outline text="console.log (&quot;postToBluesky: err.message == &quot; + err.message);" created="Mon, 08 May 2023 14:59:52 GMT"/>
									<outline text="callback (err);" created="Sat, 27 May 2023 18:15:36 GMT"/>
									<outline text="}" created="Mon, 08 May 2023 14:59:57 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 08 May 2023 19:20:38 GMT">
									<outline text="console.log (&quot;postToBluesky: data == &quot; + utils.jsonStringify (data));" isComment="true" created="Mon, 08 May 2023 14:59:52 GMT"/>
									<outline text="callback (undefined, data);" created="Sat, 27 May 2023 18:15:36 GMT"/>
									<outline text="}" created="Mon, 08 May 2023 19:20:40 GMT"/>
									</outline>
								<outline text="});" created="Mon, 08 May 2023 19:20:31 GMT"/>
								</outline>
							<outline text="}" created="Mon, 08 May 2023 15:05:33 GMT"/>
							</outline>
						<outline text="});" created="Mon, 08 May 2023 17:20:09 GMT"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 12:43:37 GMT"/>
					</outline>
				<outline text="function postToWordpress (params, callback) {" created="Sat, 27 May 2023 13:04:30 GMT">
					<outline text="Changes" isComment="true" created="Sat, 27 May 2023 13:56:18 GMT">
						<outline text="5/27/23; 9:56:31 AM by DW" created="Sat, 27 May 2023 13:56:30 GMT">
							<outline text="params: urlsite, username, password, title, description, link" created="Sat, 27 May 2023 13:56:31 GMT"/>
							</outline>
						</outline>
					<outline text="const client = wordpress.createClient ({">
						<outline text="url: params.urlsite,"/>
						<outline text="username: params.username,"/>
						<outline text="password: params.password"/>
						<outline text="});"/>
						</outline>
					<outline text="" created="Sun, 14 May 2023 15:28:11 GMT"/>
					<outline text="function getPostInfo (client, idPost, callback) {" created="Sun, 23 Apr 2023 15:27:20 GMT">
						<outline text="client.getPost (idPost, function (err, thePost) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
							<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
								<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
								<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
								<outline text="callback (undefined, thePost);" created="Sun, 23 Apr 2023 15:30:19 GMT"/>
								<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
								</outline>
							<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
							</outline>
						<outline text="}" created="Sun, 23 Apr 2023 15:42:11 GMT"/>
						</outline>
					<outline text="function newPost (client, title, content, link, callback) {" created="Sun, 23 Apr 2023 15:27:20 GMT">
						<outline text="if (link !== undefined) {" created="Sun, 14 May 2023 15:54:06 GMT">
							<outline text="content += &quot;\n\n&quot; + link;" created="Sun, 14 May 2023 15:54:19 GMT"/>
							<outline text="}" created="Sun, 14 May 2023 15:54:13 GMT"/>
							</outline>
						<outline text="" created="Sun, 14 May 2023 15:54:06 GMT"/>
						<outline text="const thePost = {" created="Sun, 23 Apr 2023 15:08:51 GMT">
							<outline text="title, "/>
							<outline text="content," created="Sun, 23 Apr 2023 15:32:42 GMT"/>
							<outline text="status: &quot;publish&quot; //omit this to create a draft that isn't published" created="Sun, 23 Apr 2023 15:23:39 GMT"/>
							<outline text="};" created="Sun, 23 Apr 2023 15:08:57 GMT"/>
							</outline>
						<outline text="client.newPost (thePost, function (err, idNewPost) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
							<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
								<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
								<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
								<outline text="thePost.idNewPost = idNewPost;" isComment="true" created="Sun, 23 Apr 2023 15:30:36 GMT"/>
								<outline text="getPostInfo (client, idNewPost, function (err, theNewPost) {" created="Sun, 23 Apr 2023 15:44:20 GMT">
									<outline text="if (err) {" created="Sun, 23 Apr 2023 15:44:56 GMT">
										<outline text="callback (err);" created="Sun, 23 Apr 2023 15:44:59 GMT"/>
										<outline text="}" created="Sun, 23 Apr 2023 15:45:02 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 23 Apr 2023 15:45:02 GMT">
										<outline text="callback (undefined, theNewPost);" created="Sun, 23 Apr 2023 15:45:04 GMT"/>
										<outline text="}" created="Sun, 23 Apr 2023 15:45:09 GMT"/>
										</outline>
									<outline text="});" created="Sun, 23 Apr 2023 15:44:32 GMT"/>
									</outline>
								<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
								</outline>
							<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
							</outline>
						<outline text="}" created="Sun, 23 Apr 2023 15:27:52 GMT"/>
						</outline>
					<outline text="" created="Sun, 14 May 2023 15:27:35 GMT"/>
					<outline text="newPost (client, params.title, params.description, params.link, function (err, thePost) {" created="Sun, 23 Apr 2023 15:30:57 GMT">
						<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
							<outline text="console.log (&quot;postToWordpress: err.message == &quot; + err.message);" created="Sun, 23 Apr 2023 15:10:07 GMT"/>
							<outline text="callback (err);" created="Sat, 27 May 2023 14:00:28 GMT"/>
							<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
							<outline text="console.log (&quot;postToWordpress: thePost.link == &quot; + thePost.link);" created="Sun, 23 Apr 2023 15:10:07 GMT"/>
							<outline text="callback (undefined, thePost);" created="Sat, 27 May 2023 14:00:28 GMT"/>
							<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
							</outline>
						<outline text="});" created="Sun, 23 Apr 2023 15:31:23 GMT"/>
						</outline>
					<outline text="}" created="Sat, 27 May 2023 13:55:30 GMT"/>
					</outline>
				<outline text="" created="Sat, 27 May 2023 13:04:31 GMT"/>
				<outline text="function handleHttpRequest (theRequest) {" created="Sat, 06 Nov 2021 20:25:05 GMT">
					<outline text="var now = new Date ();"/>
					<outline text="const params = theRequest.params;"/>
					<outline text="function returnRedirect (url, code) { ">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnPlainText (theString) {">
						<outline text="if (theString === undefined) {" created="Sat, 17 Dec 2022 15:19:03 GMT">
							<outline text="theString = &quot;&quot;;" created="Sat, 17 Dec 2022 15:19:12 GMT"/>
							<outline text="}" created="Sat, 17 Dec 2022 15:19:19 GMT"/>
							</outline>
						<outline text="console.log (&quot;returnPlainText: theString == &quot; + theString + &quot;, typeof theString == &quot; + typeof theString);" isComment="true" created="Sat, 17 Dec 2022 14:28:03 GMT"/>
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theString);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {" created="Fri, 16 Dec 2022 19:04:28 GMT">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}" created="Fri, 16 Dec 2022 19:04:33 GMT"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnJsontext (jsontext) { //9/14/22 by DW">
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, jsontext.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, returnedValue) {">
						<outline text="Changed" isComment="true" created="Wed, 14 Sep 2022 19:47:30 GMT">
							<outline text="9/14/22; 3:47:35 PM by DW" created="Wed, 14 Sep 2022 19:47:34 GMT">
								<outline text="If the returned value is an object, call returnData, but if it's something else, return it as a string. " created="Wed, 14 Sep 2022 19:47:36 GMT"/>
								<outline text="In all cases, the returned type is application/json." created="Wed, 14 Sep 2022 19:48:09 GMT"/>
								<outline text="This allows the river routines to convert the object to jsontext so it can cache that instead of an object." created="Wed, 14 Sep 2022 19:48:38 GMT"/>
								</outline>
							</outline>
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (typeof returnedValue == &quot;object&quot;) {" created="Wed, 14 Sep 2022 19:49:36 GMT">
								<outline text="returnData (returnedValue);"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:49:54 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 14 Sep 2022 19:50:07 GMT">
								<outline text="returnJsontext (returnedValue); //9/14/22 by DW" created="Wed, 14 Sep 2022 19:52:50 GMT"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:50:09 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Sat, 27 May 2023 13:47:51 GMT"/>
					<outline text="stats.ctHits++;" created="Sat, 27 May 2023 13:47:51 GMT"/>
					<outline text="stats.whenLastHit = now;" created="Sat, 27 May 2023 13:47:57 GMT"/>
					<outline text="statsChanged ();" created="Sat, 27 May 2023 13:48:04 GMT"/>
					<outline text="" created="Sat, 27 May 2023 13:47:51 GMT"/>
					<outline text="switch (theRequest.method) {" created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803">
						<outline text="case &quot;POST&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
							<outline text="const postparams = qs.parse (theRequest.postBody);" created="Sat, 27 May 2023 14:55:54 GMT"/>
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/bluesky&quot;:" created="Sat, 27 May 2023 13:54:28 GMT">
									<outline text="postToBluesky (postparams, httpReturn);" created="Sat, 27 May 2023 13:54:56 GMT"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/wordpress&quot;:" created="Sat, 27 May 2023 13:54:28 GMT">
									<outline text="postToWordpress (postparams, httpReturn);" created="Sat, 27 May 2023 13:54:56 GMT"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="default: " created="Thu, 30 Jun 2022 15:30:25 GMT">
									<outline text="returnNotFound ()"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="}" created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830"/>
								</outline>
							<outline text="break;" created="Sat, 17 Dec 2022 15:21:18 GMT"/>
							</outline>
						<outline text="case &quot;GET&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/now&quot;: " created="Thu, 03 Nov 2022 19:29:32 GMT">
									<outline text="returnPlainText (new Date ());" created="Fri, 04 Nov 2022 14:42:33 GMT"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="default: " created="Thu, 30 Jun 2022 15:30:25 GMT">
									<outline text="returnNotFound ();" created="Fri, 16 Dec 2022 20:51:50 GMT"/>
									<outline text="break;" created="Thu, 30 Jun 2022 15:30:27 GMT"/>
									</outline>
								<outline text="}" created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830"/>
								</outline>
							<outline text="break;" created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808"/>
							</outline>
						<outline text="}" created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804"/>
						</outline>
					<outline text="}" created="Sat, 06 Nov 2021 20:25:18 GMT"/>
					</outline>
				<outline text="" created="Sat, 27 May 2023 13:04:31 GMT"/>
				<outline text="" created="Sat, 27 May 2023 13:04:31 GMT"/>
				<outline text="function everyMinute () {" created="Wed, 30 Nov 2022 15:49:21 GMT">
					<outline text="}" created="Wed, 30 Nov 2022 15:49:27 GMT"/>
					</outline>
				<outline text="function everySecond () {" created="Mon, 28 Nov 2022 23:09:58 GMT">
					<outline text="if (flStatsChanged) {" created="Mon, 28 Nov 2022 23:30:53 GMT">
						<outline text="flStatsChanged = false;" created="Mon, 28 Nov 2022 23:30:56 GMT"/>
						<outline text="writeStats ();" created="Wed, 30 Nov 2022 15:47:54 GMT"/>
						<outline text="}" created="Mon, 28 Nov 2022 23:31:43 GMT"/>
						</outline>
					<outline text="}" created="Mon, 28 Nov 2022 23:10:02 GMT"/>
					</outline>
				<outline text="function readConfig (fname, data, callback) {" created="Wed, 16 Nov 2022 15:42:09 GMT">
					<outline text="fs.readFile (fname, function (err, jsontext) {" created="Wed, 16 Nov 2022 15:42:34 GMT">
						<outline text="if (!err) {" created="Wed, 16 Nov 2022 15:42:51 GMT">
							<outline text="var jstruct;" created="Wed, 16 Nov 2022 15:42:50 GMT"/>
							<outline text="try {" created="Wed, 16 Nov 2022 15:43:21 GMT">
								<outline text="jstruct = JSON.parse (jsontext);" created="Wed, 16 Nov 2022 15:43:57 GMT"/>
								<outline text="for (var x in jstruct) {" created="Wed, 16 Nov 2022 15:44:48 GMT">
									<outline text="data [x] = jstruct [x];" created="Wed, 16 Nov 2022 15:44:54 GMT"/>
									<outline text="}" created="Wed, 16 Nov 2022 15:45:01 GMT"/>
									</outline>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:26 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Wed, 16 Nov 2022 15:43:26 GMT">
								<outline text="console.log (&quot;readConfig: fname == &quot; + fname + &quot;, err.message == &quot; + utils.jsonStringify (err.message));" created="Wed, 16 Nov 2022 15:43:30 GMT"/>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:43 GMT"/>
								</outline>
							<outline text="}" created="Wed, 16 Nov 2022 15:42:55 GMT"/>
							</outline>
						<outline text="callback ();" created="Wed, 16 Nov 2022 15:49:59 GMT"/>
						<outline text="});" created="Wed, 16 Nov 2022 15:42:44 GMT"/>
						</outline>
					<outline text="}" created="Wed, 16 Nov 2022 15:42:33 GMT"/>
					</outline>
				<outline text="" created="Sat, 27 May 2023 12:52:41 GMT"/>
				<outline text="function start (options) {" created="Fri, 12 May 2023 18:14:15 GMT">
					<outline text="for (var x in options) {" created="Sat, 27 May 2023 13:28:10 GMT">
						<outline text="config [x] = options [x];" created="Sat, 27 May 2023 13:28:16 GMT"/>
						<outline text="}" created="Sat, 27 May 2023 13:28:22 GMT"/>
						</outline>
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + new Date ().toLocaleTimeString () + &quot;, port == &quot; + config.port + &quot;.\n&quot;);"/>
					<outline text="utils.runEveryMinute (everyMinute);" created="Wed, 30 Nov 2022 15:50:13 GMT"/>
					<outline text="setInterval (everySecond, 1000);" created="Mon, 28 Nov 2022 23:13:18 GMT"/>
					<outline text="davehttp.start (config, handleHttpRequest);"/>
					<outline text="}" created="Fri, 12 May 2023 18:14:20 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Sat, 27 May 2023 12:47:39 GMT">
				<outline text="# textcasting">
					<outline text="An HTTP server that can post messages to Mastodon, Bluesky and WordPress via REST call."/>
					<outline text="Think of it as a bridge between web writing tools and various places people want to post their writing to." created="Sat, 27 May 2023 13:05:55 GMT"/>
					</outline>
				</outline>
			<outline text="testing/package.json" created="Sat, 27 May 2023 13:13:06 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Bare bones demo app for textcasting package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;textcasting&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="testing/test.js" created="Sat, 27 May 2023 13:12:57 GMT">
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const textcasting = require (&quot;textcasting&quot;);  " isComment="true"/>
				<outline text="const textcasting = require (&quot;../textcasting.js&quot;);  "/>
				<outline text="" created="Sat, 27 May 2023 13:29:07 GMT"/>
				<outline text="textcasting.start ();" created="Sat, 27 May 2023 13:29:07 GMT"/>
				</outline>
			<outline text="config.json" isComment="true" created="Sun, 23 Apr 2023 13:52:50 GMT">
				<outline text="{" created="Sun, 23 Apr 2023 13:52:54 GMT">
					<outline text="&quot;username&quot;: &quot;xxx&quot;," created="Sun, 23 Apr 2023 13:52:56 GMT"/>
					<outline text="&quot;password&quot;: &quot;xxx&quot;," created="Sun, 23 Apr 2023 13:52:56 GMT"/>
					<outline text="&quot;urlsite&quot;: &quot;xxx&quot;," created="Sun, 23 Apr 2023 13:52:56 GMT"/>
					<outline text="}" created="Sun, 23 Apr 2023 13:52:55 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Tue, 29 Nov 2022 14:08:17 GMT">
			<outline text="nodeEditorSuite.utilities.buildITextcasting ()" created="Sun, 06 Nov 2022 15:51:50 GMT"/>
			</outline>
		</body>
	</opml>
